#!/bin/bash

usage() {
  echo """
  Syntax: $0 -j <path to dashboard.json> -d <new chart directory name> -b <dashboard base path>

  Example Usage: Go to the dashboard base directory which you can obtain using -l option of this script 
  and execute script like below 

  cd /path/to/helmrepo/helm/charts/bluescape-monitoring-dashboards
  ../../bin/add-dashboard -j ~/Downloads/Redis.json -d 44_redis_dashboard -b bluescape-monitoring-dashboards

  Additional options:
  -h : help
  -l : list of  base dashboards
  """
  exit 1
}

while getopts "hlj:d:b:" opt; do
  case $opt in
    j) to_add=$OPTARG ;;
    d) new_dashboard_dir=$OPTARG ;;
    b) dashboard_base=$OPTARG ;;
    h) usage ;;
    l) echo "Available dashboard bases
             bs-monitoring-dashboards
             bs-monitoring-dashboards-2
             bs-monitoring-dashboards-3" 
       exit 0
       ;;
    \?) echo "Invalid option -$OPTARG" >&2
        exit 1 ;;
    :) echo "Option -$OPTARG requires an argument." >&2
        exit 1 ;;
  esac
done

available_dashboards=("bluescape-monitoring-dashboards" "bluescape-monitoring-dashboards-2" "bluescape-monitoring-dashboards-3")

if [ -z "$dashboard_base" ]; then
  echo >&2 "Error: Dashboard base path (-b) is required, use add-dasbhoard -l to get list of available dashboard base"
  usage
  exit 1
elif [[ ! " ${available_dashboards[@]} " =~ " ${dashboard_base} " ]]; then
  echo >&2 "Error: Specified dashboard base '$dashboard_base' is not in the list of available dashboards."
  echo >&2 "Available dashboard bases: ${available_dashboards[*]}"
  usage
  exit 1
fi

set -eo pipefail

workdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
dashboard_base="$workdir/../charts/$dashboard_base"
to_add="$to_add"
new_dashboard_dir="$new_dashboard_dir"
prereqs=(yaml2json json2yaml jq)
darwin_prereqs=(ggrep gsed)
IFS=/ read -ra DIRS <<< "$dashboard_base" 

generate_configmap()
{
  local skipped_entry
  skipped_entry=$($grep '{{' "$dashboard_base"/templates/0_template/configmap.yaml)
  cm_title="$(jq -Mr .title "$to_add" | tr ' ' '-' | tr -d '/' | \
    tr '[:upper:]' '[:lower:]')-dashboard"

  $grep -v '{{' "$dashboard_base"/templates/0_template/configmap.yaml | \
    yaml2json - | \
    jq --arg addin "$skipped_entry" --arg n "$cm_title" --arg d \
    "$(< "$to_add" jq -Mr 'del(.__inputs) | del(.__requires)')" -Mr \
    '.metadata.name = $n | .data = {($n + ".json"): $d}
      | .metadata.labels = $addin' | \
    json2yaml - > "$new_dashboard_dir"/configmap-tmp.yaml && \
  $sed -re 's/(labels:)/\1\n/' -e "s#'##g" "$new_dashboard_dir"/configmap-tmp.yaml \
    > "$new_dashboard_dir"/configmap.yaml && \
  rm "$new_dashboard_dir"/configmap-tmp.yaml

  # fix reference for legendFormat gotpl braced strings so helm
  # doesn't accidentally attempt to interpolate those strings
  perl -ln -e \
    'if ( /legendFormat/ &&  !/`/ ) { s/\{\{(\s*.*\s*)\}\}/{{ `{{$1}}` }}/g }; print' \
    "$new_dashboard_dir"/configmap.yaml > "$new_dashboard_dir"/configmap-fixed.yaml && \
  mv "$new_dashboard_dir"/configmap-fixed.yaml "$new_dashboard_dir"/configmap.yaml
}

generate_dashboard_manifest()
{
  local skipped_entry
  skipped_entry=$($grep '{{' "$dashboard_base"/templates/0_template/configmap.yaml)

  $grep -v '{{' "$dashboard_base"/templates/0_template/dashboard.yaml | \
    yaml2json - | \
    jq --arg addin "$skipped_entry" --arg n "$cm_title" \
    '.metadata.name = $n | .metadata.labels = $addin |
     .spec.name = $n     | .spec.configMapRef.name = $n |
     .spec.configMapRef.key = $n + ".json"' | \
    json2yaml - > "$new_dashboard_dir"/dashboard-tmp.yaml && \
  $sed -re 's/(labels:)/\1\n/' -e "s#'##g" "$new_dashboard_dir"/dashboard-tmp.yaml \
    > "$new_dashboard_dir"/dashboard.yaml && \
  rm "$new_dashboard_dir"/dashboard-tmp.yaml
}

check_prereqs()
{
  if [[ $(uname -s) == 'Darwin' ]]; then
    # shellcheck disable=SC2206
    prereqs+=(${darwin_prereqs[*]})
  fi

  for r in "${prereqs[@]}"; do
    if ! which "$r" >/dev/null 2>&1; then
      echo >&2 "The pre-requisite '$r' does not exist or is not in"\
               "your PATH. Please fix."
      exit 1
    fi
  done
}

sanity_check_arg1()
{
  if [[ -z "$to_add" ]]; then
    echo >&2 "No dashboard JSON file specified."
    usage
    exit 1
  fi

  if ! test -e "$to_add"; then
    echo >&2 "The dashboard JSON '$to_add' does not exist."
    usage
    exit 1
  fi

  if ! jq . "$to_add" >/dev/null 2>&1; then
    echo >&2 'The dashboard manifest does not seem to be valid JSON.'\
             'Please validate.'
    usage
    exit 1
  fi
}

sanity_check_arg2()
{
  local desired_path
  local num_dirs=${#DIRS[@]}
  desired_path="charts/${DIRS[((num_dirs - 1))]}"
  current_path="${DIRS[((num_dirs - 2))]}/${DIRS[((num_dirs - 1))]}"

  if [[ -z "$new_dashboard_dir" ]]; then
    echo >&2 'Please specify the directory in which the dashboard should be created.'
    usage
    exit 1
  fi

  if [[ "$current_path" != "$desired_path" ]]; then
    printf >&2 "Please run this script from the %s path in the helm repo\n" $desired_path
    echo "Current path is $current_path"
    usage
    exit 1
  fi

  if [[ "$new_dashboard_dir" =~ ^/ ]]; then
    echo >&2 'Please use a relative path for the dashboard directory.'
    exit 1
  fi

  # if the user specifies the "templates/<directory>" then remove "templates"
  # otherwise just use the specified relative path
  new_dashboard_dir="$dashboard_base/templates/$(echo "${new_dashboard_dir/templates//}" | $sed -r 's#/+#/#g')"
  if ! mkdir -p "$new_dashboard_dir"; then
    echo >&2 "Unable to create dashboard directory. mkdir error code was $!"
    exit 1
  fi
}


case $(uname -s) in
  Linux) grep=$(which grep)
    sed=$(which sed)
  ;;
  Darwin) grep=$(which ggrep)
          sed=$(which gsed)
  ;;
  *) echo >& 'Not sure how to evaluate this distro'
     exit 1
  ;;
esac

check_prereqs
sanity_check_arg1
sanity_check_arg2
generate_configmap
generate_dashboard_manifest
