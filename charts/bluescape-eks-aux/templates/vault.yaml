{{- if .Values.vault.enabled }}
apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name:  "vault"
  namespace: vault
spec:
  size: 3
  image: "{{ .Values.vault.image }}:{{ .Values.vault.imageTag }}"
  bankVaultsImage: banzaicloud/bank-vaults:latest

  vaultPodSpec:
    priorityClassName: system-node-critical

  vaultAnnotations:
    type/instance: "vault"

  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"


  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: vault

  # Specify the Service's type where the Vault Service is exposed
  # Please note that some Ingress controllers like https://github.com/kubernetes/ingress-gce
  # forces you to expose your Service on a NodePort
  serviceType: ClusterIP

#  # Request an Ingress controller with the default configuration
#  ingress:
#    # Specify Ingress object annotations here, if TLS is enabled (which is by default)
#    # the operator will add NGINX, Traefik and HAProxy Ingress compatible annotations
#    # to support TLS backends
#    annotations:
#      kubernetes.io/ingress.class: "nginx"
#      nginx.ingress.kubernetes.io/cors-allow-methods: 'PUT, GET, POST, DELETE, PATCH, OPTIONS'
#      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#      # Remove this if you want to see the Vault-UI
#      nginx.ingress.kubernetes.io/permanent-redirect: https://www.bluescape.com
#      kubernetes.io/tls-acme: "true"
#      cert-manager.io/cluster-issuer: "letsencrypt-prod"
#      acme.cert-manager.io/http01-ingress-class: nginx
#    # Override the default Ingress specification here
#    # This follows the same format as the standard Kubernetes Ingress
#    # See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#ingressspec-v1beta1-extensions
#    spec:
#      rules:
#        - host: vault.insert_domain
#          http:
#            paths:
#              - backend:
#                  serviceName: vault
#                  servicePort: 8200
#                path: /
#      tls:
#        - hosts:
#            - vault.insert_domain
#          secretName: vault.insert_domain
  # Use local disk to store Vault raft data, see config section.
  volumeClaimTemplates:
    - metadata:
        name: vault-raft
      spec:
        # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
        storageClassName: "persistent"
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: 1Gi

  volumeMounts:
    - name: vault-raft
      mountPath: /vault/file

  veleroEnabled: true

  # Support for distributing the generated CA certificate Secret to other namespaces.
  # Define a list of namespaces or use ["*"] for all namespaces.
  caNamespaces:
    - "*"

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      preFlightChecks: true
    kubernetes:
      secretnamespace: vault

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      raft:
        path: "/vault/file"
    listener:
      tcp:
        address: "0.0.0.0:8200"
        # Uncommenting the following line and deleting tls_cert_file and tls_key_file disables TLS
        # tls_disable: true
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    api_addr: https://vault.vault.svc.cluster.local:8200
    cluster_addr: "https://${.Env.POD_NAME}:8201"
    ui: true

  statsdDisabled: true

  resources:
    # A YAML representation of resource ResourceRequirements for vault container
    # Detail can reference: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container
    vault:
      limits:
        cpu: 2
        memory: 1Gi
      requests:
        cpu: 1
        memory: 512Mi

  # See: https://github.com/banzaicloud/bank-vaults#example-external-vault-configuration for more details.
  externalConfig:
    policies:
      - name: allow_secrets
        rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }

    auth:
      - type: kubernetes
        roles:
          # Allow every pod in the default namespace to use the secret kv store
          - name: default
            bound_service_account_names:
              {{- range .Values.vault.bound_service_account_names }}
              - {{ . }}
              {{- end }}
            bound_service_account_namespaces:
              {{- range .Values.vault.bound_service_account_namespaces }}
              - {{ . }}
              {{- end }}
            policies: allow_secrets
            ttl: 1h

          # Logically split inline secrets mutations away from pod mutations
          # Allow vault-secrets-webhook to use the secret kv store
          # for inline secrets mutation. The webhook doesn't recognize
          # service account annotations for secrets. It uses the
          # SA for the webhook pods instead.
          - name: secretsmutation
            bound_service_account_names:
              - lacework
              - secrets-webhook-vault-secrets-webhook
            bound_service_account_namespaces:
              - lacework
              - vault-secrets-webhook
            policies:
              - allow_secrets
            ttl: 1h

    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2

    # Allows writing some secrets to Vault (useful for development purposes but terrible for production)
    # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
    # Jennifer suggested: Since we're using terraform template_file for this, we might be able to throw an if statement there instead of commenting it out. Then we could add something to the cluster module such as vault_seed = true. (default it to false if not defined)... thoughts?
    # If we want to bring this back, perhaps as a template to help customers fill in their own information, make sure to do that but be aware that the secrets structure used by the application has changed significantly since the version below.
    #startupSecrets:
    #  - type: kv
    #    path: secret/data/accounts/aws
    #    data:
    #      data:
    #        AWS_ACCESS_KEY_ID: secretId
    #        AWS_SECRET_ACCESS_KEY: s3cr3t

  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: debug

  labels:
    app: vault

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
#  tolerations:
#    - key: "spot"
#      operator: Equal
#      value: "false"
#      effect: NoSchedule

  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  podAntiAffinity: topology.kubernetes.io/zone # This rule ensures that the application vault pods cannot run in the same zone.
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: # This rule ensures that during scheduling time the application must be placed on-demand nodes, NOT Spot instances
      nodeSelectorTerms:
        - matchExpressions:
            - key: "spot"
              operator: In
              values: [ "false" ]
            - key: "dedicated"
              operator: NotIn
              values:
                - loki
                - cortex
                - prometheus
                - edge
{{- end }}
